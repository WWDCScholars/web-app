$light-theme: "light";
$dark-theme: "dark";

$themes: (
  $light-theme: (
    background-primary-base: rgb(255, 255, 255),
    background-primary-elevated: rgb(255, 255, 255),
    background-grouped-primary-base: rgb(242, 242, 247),
    background-grouped-primary-elevated: rgb(242, 242, 247),
    background-grouped-secondary-base: rgb(255, 255, 255),
    background-grouped-secondary-elevated: rgb(255, 255, 255),
    background-grouped-tertiary-base: rgb(242, 242, 247),
    background-grouped-tertiary-elevated: rgb(242, 242, 247),

    separator: rgb(198, 198, 200),
    separator-transparent: rgba(60, 60, 67, 0.36),

    label-primary: rgb(0, 0, 0),
    label-secondary: rgba(60, 60, 67, 0.6),
    label-tertiary: rgba(60, 60, 67, 0.3),
    label-inverted: rgb(255, 255, 255),

    fill-primary: rgba(120, 120, 128, 0.2),
    fill-secondary: rgba(120, 120, 128, 0.16),
    fill-tertiary: rgba(118, 118, 128, 0.12),

    grey1: rgb(142, 142, 147),
    grey2: rgb(174, 174, 178),
    grey3: rgb(199, 199, 204),
    grey4: rgb(209, 209, 214),
    grey5: rgb(229, 229, 234),

    sch-purple: rgb(65, 53, 153),
    sch-purple-2: rgb(106, 101, 164),
    sch-purple-3: rgb(141, 139, 193),
    sch-red: #ef5349,
    sch-red-2: #e64d43,
    sch-blue: #3eb5d9,
    sch-blue-2: #395d6f,
    sch-green: #3ab298,
    sch-orange: #f99532,
  ),
  $dark-theme: (
    background-primary-base: rgb(0, 0, 0),
    background-primary-elevated: rgb(28, 28, 30),
    background-grouped-primary-base: rgb(0, 0, 0),
    background-grouped-primary-elevated: rgb(28, 28, 30),
    background-grouped-secondary-base: rgb(28, 28, 30),
    background-grouped-secondary-elevated: rgb(44, 44, 46),
    background-grouped-tertiary-base: rgb(44, 44, 46),
    background-grouped-tertiary-elevated: rgb(58, 58, 60),

    separator: rgb(56, 56, 58),
    separator-transparent: rgba(84, 84, 88, 0.65),

    label-primary: rgb(255, 255, 255),
    label-secondary: rgba(235, 235, 245, 0.6),
    label-tertiary: rgba(235, 235, 245, 0.3),
    label-inverted: rgb(0, 0, 0),

    fill-primary: rgba(120, 120, 128, 0.36),
    fill-secondary: rgba(120, 120, 128, 0.32),
    fill-tertiary: rgba(118, 118, 128, 0.24),

    grey1: rgb(142, 142, 147),
    grey2: rgb(99, 99, 102),
    grey3: rgb(72, 72, 74),
    grey4: rgb(58, 58, 60),
    grey5: rgb(44, 44, 46),

    sch-purple: rgb(165, 153, 255),
    sch-purple-2: rgb(153, 139, 253),
    sch-purple-3: rgb(142, 122, 255),
    sch-red: #ff6a6a,
    sch-red-2: #ff4f42,
    sch-blue: #7db6d3,
    sch-blue-2: #3bc3ec,
    sch-green: #3eccad,
    sch-orange: #ffa952,
  ),
);

//converting scss variable into css variable
:root {
  $light: map-get($themes, $light-theme);
  @each $name, $color in $light {
    --color-#{$name}: #{$color};
    --color-#{$name}-r: #{red($color)};
    --color-#{$name}-g: #{green($color)};
    --color-#{$name}-b: #{blue($color)};
    --color-#{$name}-a: #{alpha($color)};
    --color-#{$name}-h: #{hue($color)};
    --color-#{$name}-s: #{saturation($color)};
    --color-#{$name}-l: #{lightness($color)};
  }

  --theme-shadow: 0 0 4px 2px rgba(0, 0, 0, 0.16);
}

.dark-mode {
  $dark: map-get($themes, $dark-theme);
  @each $name, $color in $dark {
    --color-#{$name}: #{$color};
    --color-#{$name}-r: #{red($color)};
    --color-#{$name}-g: #{green($color)};
    --color-#{$name}-b: #{blue($color)};
    --color-#{$name}-a: #{alpha($color)};
    --color-#{$name}-h: #{hue($color)};
    --color-#{$name}-s: #{saturation($color)};
    --color-#{$name}-l: #{lightness($color)};
  }

  --theme-shadow: none;
}

//creating a function to get color instead of using css varible
@function getColor($color-name) {
  @return var(--color-#{$color-name});
}

//change brigthness / lightness of color *by* $amount (+ lighter, - darker)
//$amount should be in percent 0% - 100%
@function lightenColor($colorName, $amount) {
  // use capitalized `Min` / `Max` to avoid SASS compiler error, CSS is canse-insensetive
  @return hsl(
    var(--color-#{$colorName}-h),
    var(--color-#{$colorName}-s),
    Max(0%, Min(100%, calc(var(--color-#{$colorName}-l) + #{$amount})))
  );
}

//change transparancy of color *by* $amount (e.g. 0.1 *more* transparent)
//$amount should be in decimal 0 - 1
@function transparentizeColor($colorName, $amount) {
  // use capitalized `Min` / `Max` to avoid SASS compiler error, CSS is canse-insensetive
  @return rgba(
    var(--color-#{$colorName}-r),
    var(--color-#{$colorName}-g),
    var(--color-#{$colorName}-b),
    Max(0, Min(1, calc(var(--color-#{$colorName}-a) - #{$amount})))
  );
}

$background-primary-base: getColor("background-primary-base");
$background-primary-elevated: getColor("background-primary-elevated");
$background-grouped-primary-base: getColor("background-grouped-primary-base");
$background-grouped-primary-elevated: getColor("background-grouped-primary-elevated");
$background-grouped-secondary-base: getColor("background-grouped-secondary-base");
$background-grouped-secondary-elevated: getColor("background-grouped-secondary-elevated");
$background-grouped-tertiary-base: getColor("background-grouped-tertiary-base");
$background-grouped-tertiary-elevated: getColor("background-grouped-tertiary-elevated");

$separator: getColor("separator");
$separator-transparent: getColor("separator-transparent");

$label-primary: getColor("label-primary");
$label-secondary: getColor("label-secondary");
$label-tertiary: getColor("label-tertiary");
$label-inverted: getColor("label-inverted");

$fill-primary: getColor("fill-primary");
$fill-secondary: getColor("fill-secondary");
$fill-tertiary: getColor("fill-tertiary");

$grey1: getColor("grey1");
$grey2: getColor("grey2");
$grey3: getColor("grey3");
$grey4: getColor("grey4");
$grey5: getColor("grey5");

$shadow: var(--theme-shadow);

$sch-purple: getColor("sch-purple");
$sch-purple-2: getColor("sch-purple-2");
$sch-purple-3: getColor("sch-purple-3");

$sch-red: getColor("sch-red");
$sch-red-2: getColor("sch-red-2");
$sch-blue: getColor("sch-blue");
$sch-blue-2: getColor("sch-blue-2");
$sch-green: getColor("sch-green");
$sch-orange: getColor("sch-orange");
